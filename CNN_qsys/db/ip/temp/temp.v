// temp.v

// Generated using ACDS version 15.1 193

`timescale 1 ps / 1 ps
module temp (
		input  wire        clk_clk,            //    clk.clk
		output wire [14:0] memory_mem_a,       // memory.mem_a
		output wire [2:0]  memory_mem_ba,      //       .mem_ba
		output wire [0:0]  memory_mem_ck,      //       .mem_ck
		output wire [0:0]  memory_mem_ck_n,    //       .mem_ck_n
		output wire [0:0]  memory_mem_cke,     //       .mem_cke
		output wire [0:0]  memory_mem_cs_n,    //       .mem_cs_n
		output wire [1:0]  memory_mem_dm,      //       .mem_dm
		output wire [0:0]  memory_mem_ras_n,   //       .mem_ras_n
		output wire [0:0]  memory_mem_cas_n,   //       .mem_cas_n
		output wire [0:0]  memory_mem_we_n,    //       .mem_we_n
		output wire        memory_mem_reset_n, //       .mem_reset_n
		inout  wire [15:0] memory_mem_dq,      //       .mem_dq
		inout  wire [1:0]  memory_mem_dqs,     //       .mem_dqs
		inout  wire [1:0]  memory_mem_dqs_n,   //       .mem_dqs_n
		output wire [0:0]  memory_mem_odt,     //       .mem_odt
		input  wire        oct_rzqin,          //    oct.rzqin
		input  wire        reset_reset_n       //  reset.reset_n
	);

	wire    rst_controller_reset_out_reset;     // rst_controller:reset_out -> mem_if_ddr3_emif_0:soft_reset_n
	wire    mem_if_ddr3_emif_0_afi_reset_reset; // mem_if_ddr3_emif_0:afi_reset_n -> rst_controller:reset_in0

	temp_mem_if_ddr3_emif_0 mem_if_ddr3_emif_0 (
		.pll_ref_clk               (clk_clk),                            //      pll_ref_clk.clk
		.global_reset_n            (),                                   //     global_reset.reset_n
		.soft_reset_n              (~rst_controller_reset_out_reset),    //       soft_reset.reset_n
		.afi_clk                   (),                                   //          afi_clk.clk
		.afi_half_clk              (),                                   //     afi_half_clk.clk
		.afi_reset_n               (mem_if_ddr3_emif_0_afi_reset_reset), //        afi_reset.reset_n
		.afi_reset_export_n        (),                                   // afi_reset_export.reset_n
		.mem_a                     (memory_mem_a),                       //           memory.mem_a
		.mem_ba                    (memory_mem_ba),                      //                 .mem_ba
		.mem_ck                    (memory_mem_ck),                      //                 .mem_ck
		.mem_ck_n                  (memory_mem_ck_n),                    //                 .mem_ck_n
		.mem_cke                   (memory_mem_cke),                     //                 .mem_cke
		.mem_cs_n                  (memory_mem_cs_n),                    //                 .mem_cs_n
		.mem_dm                    (memory_mem_dm),                      //                 .mem_dm
		.mem_ras_n                 (memory_mem_ras_n),                   //                 .mem_ras_n
		.mem_cas_n                 (memory_mem_cas_n),                   //                 .mem_cas_n
		.mem_we_n                  (memory_mem_we_n),                    //                 .mem_we_n
		.mem_reset_n               (memory_mem_reset_n),                 //                 .mem_reset_n
		.mem_dq                    (memory_mem_dq),                      //                 .mem_dq
		.mem_dqs                   (memory_mem_dqs),                     //                 .mem_dqs
		.mem_dqs_n                 (memory_mem_dqs_n),                   //                 .mem_dqs_n
		.mem_odt                   (memory_mem_odt),                     //                 .mem_odt
		.avl_ready                 (),                                   //              avl.waitrequest_n
		.avl_burstbegin            (),                                   //                 .beginbursttransfer
		.avl_addr                  (),                                   //                 .address
		.avl_rdata_valid           (),                                   //                 .readdatavalid
		.avl_rdata                 (),                                   //                 .readdata
		.avl_wdata                 (),                                   //                 .writedata
		.avl_be                    (),                                   //                 .byteenable
		.avl_read_req              (),                                   //                 .read
		.avl_write_req             (),                                   //                 .write
		.avl_size                  (),                                   //                 .burstcount
		.local_init_done           (),                                   //           status.local_init_done
		.local_cal_success         (),                                   //                 .local_cal_success
		.local_cal_fail            (),                                   //                 .local_cal_fail
		.oct_rzqin                 (oct_rzqin),                          //              oct.rzqin
		.pll_mem_clk               (),                                   //      pll_sharing.pll_mem_clk
		.pll_write_clk             (),                                   //                 .pll_write_clk
		.pll_locked                (),                                   //                 .pll_locked
		.pll_write_clk_pre_phy_clk (),                                   //                 .pll_write_clk_pre_phy_clk
		.pll_addr_cmd_clk          (),                                   //                 .pll_addr_cmd_clk
		.pll_avl_clk               (),                                   //                 .pll_avl_clk
		.pll_config_clk            (),                                   //                 .pll_config_clk
		.pll_mem_phy_clk           (),                                   //                 .pll_mem_phy_clk
		.afi_phy_clk               (),                                   //                 .afi_phy_clk
		.pll_avl_phy_clk           ()                                    //                 .pll_avl_phy_clk
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~mem_if_ddr3_emif_0_afi_reset_reset), // reset_in0.reset
		.clk            (clk_clk),                             //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),      // reset_out.reset
		.reset_req      (),                                    // (terminated)
		.reset_req_in0  (1'b0),                                // (terminated)
		.reset_in1      (1'b0),                                // (terminated)
		.reset_req_in1  (1'b0),                                // (terminated)
		.reset_in2      (1'b0),                                // (terminated)
		.reset_req_in2  (1'b0),                                // (terminated)
		.reset_in3      (1'b0),                                // (terminated)
		.reset_req_in3  (1'b0),                                // (terminated)
		.reset_in4      (1'b0),                                // (terminated)
		.reset_req_in4  (1'b0),                                // (terminated)
		.reset_in5      (1'b0),                                // (terminated)
		.reset_req_in5  (1'b0),                                // (terminated)
		.reset_in6      (1'b0),                                // (terminated)
		.reset_req_in6  (1'b0),                                // (terminated)
		.reset_in7      (1'b0),                                // (terminated)
		.reset_req_in7  (1'b0),                                // (terminated)
		.reset_in8      (1'b0),                                // (terminated)
		.reset_req_in8  (1'b0),                                // (terminated)
		.reset_in9      (1'b0),                                // (terminated)
		.reset_req_in9  (1'b0),                                // (terminated)
		.reset_in10     (1'b0),                                // (terminated)
		.reset_req_in10 (1'b0),                                // (terminated)
		.reset_in11     (1'b0),                                // (terminated)
		.reset_req_in11 (1'b0),                                // (terminated)
		.reset_in12     (1'b0),                                // (terminated)
		.reset_req_in12 (1'b0),                                // (terminated)
		.reset_in13     (1'b0),                                // (terminated)
		.reset_req_in13 (1'b0),                                // (terminated)
		.reset_in14     (1'b0),                                // (terminated)
		.reset_req_in14 (1'b0),                                // (terminated)
		.reset_in15     (1'b0),                                // (terminated)
		.reset_req_in15 (1'b0)                                 // (terminated)
	);

endmodule
